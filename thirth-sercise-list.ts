// üßë‚Äçüíª Exerc√≠cios ‚Äì Node.js Intermedi√°rio(Express + Seguran√ßa)
// 1. API simples de usu√°rios

// Crie uma API com Express que:

// GET / users ‚Üí retorna todos os usu√°rios

// POST / users ‚Üí adiciona um novo usu√°rio(recebe JSON)

// GET / users /: id ‚Üí retorna usu√°rio por id

// 2. Middleware de log

// Crie um middleware que loga m√©todo, rota e tempo de execu√ß√£o da request.
// Exemplo de log:

// [2025 -09 - 23T21:00:00] GET / users - 15ms

// 3. Tratamento de erros

// Implemente um middleware global de erro que capture exce√ß√µes e retorne JSON no formato:

// { "error": "Mensagem de erro", "status": 500 }

// 4. Autentica√ß√£o com JWT

// Crie uma rota POST / login que:

// recebe email e senha

// retorna um token JWT v√°lido

// Crie uma rota protegida GET / profile que s√≥ responde se o usu√°rio enviar um JWT v√°lido no header Authorization.

// 5. Upload e download

// Implemente rota POST / upload que receba um arquivo com multer.

// Implemente rota GET / download /:filename que permita baixar o arquivo.

// 6. WebSockets(chat simples)

// Configure socket.io junto ao Express.

// Fa√ßa com que ao conectar, o usu√°rio receba a mensagem "Bem-vindo ao chat".

// Cada vez que algu√©m enviar mensagem(chat), todos os usu√°rios conectados recebam.

// 7. Seguran√ßa

// Configure:

// CORS ‚Üí permita apenas http://localhost:5173.

// Helmet ‚Üí para headers seguros.

// Rate limiting ‚Üí limite a 10 requests por minuto.

// 8. Preven√ß√£o de inje√ß√£o

// Simule uma rota POST / search que recebe um query string.

// Fa√ßa a sanitiza√ß√£o para impedir XSS(<script>).

// Use uma lib como validator ou sanitize - html.

// 9. Configura√ß√£o de ambiente

// Use dotenv para gerenciar vari√°veis de ambiente:

// PORT

// JWT_SECRET

// O servidor deve iniciar usando process.env.PORT.

// 10. Logging

// Configure winston(ou pino) para salvar logs:

// info ‚Üí em logs / app.log

// error ‚Üí em logs / error.log